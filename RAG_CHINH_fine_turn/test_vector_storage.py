#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ test chi ti·∫øt vector storage trong face database
"""

import sqlite3
import pickle
import numpy as np
import os
import sys
sys.path.append('face_login')

from face_db_manager import FaceDatabase

def test_vector_storage():
    """Test c√°ch vector ƒë∆∞·ª£c l∆∞u v√† retrieve"""
    
    print("=" * 60)
    print("üß¨ TEST VECTOR STORAGE & RETRIEVAL")
    print("=" * 60)
    
    try:
        # Kh·ªüi t·∫°o database manager
        face_db = FaceDatabase()
        
        print("‚úÖ Database manager initialized")
        print(f"üìÇ Database path: {face_db.db_path}")
        
        # Test 1: T·∫°o fake vector v√† l∆∞u
        print("\nüî¨ TEST 1: T·∫°o v√† l∆∞u fake vector")
        fake_name = "Test_User_Vector"
        fake_vector = np.random.random(128).astype(np.float64)
        
        print(f"   - Created vector shape: {fake_vector.shape}")
        print(f"   - Vector type: {type(fake_vector)}")
        print(f"   - Vector dtype: {fake_vector.dtype}")
        print(f"   - Vector range: [{fake_vector.min():.3f}, {fake_vector.max():.3f}]")
        
        # L∆∞u vector
        success = face_db.register_face(fake_name, fake_vector)
        print(f"   - Save result: {'‚úÖ Success' if success else '‚ùå Failed'}")
        
        # Test 2: Retrieve vector v√† so s√°nh
        print(f"\nüîç TEST 2: Retrieve v√† verify vector")
        
        with sqlite3.connect(face_db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT encoding FROM faces WHERE name = ?", (fake_name,))
            result = cursor.fetchone()
            
            if result:
                encoding_blob = result[0]
                print(f"   - Retrieved blob size: {len(encoding_blob)} bytes")
                
                # Deserialize
                retrieved_vector = pickle.loads(encoding_blob)
                print(f"   - Retrieved vector shape: {retrieved_vector.shape}")
                print(f"   - Retrieved vector type: {type(retrieved_vector)}")
                print(f"   - Retrieved vector dtype: {retrieved_vector.dtype}")
                
                # So s√°nh
                are_equal = np.array_equal(fake_vector, retrieved_vector)
                max_diff = np.max(np.abs(fake_vector - retrieved_vector))
                
                print(f"   - Vectors identical: {'‚úÖ Yes' if are_equal else '‚ùå No'}")
                print(f"   - Max difference: {max_diff:.10f}")
                
                if are_equal:
                    print("   ‚úÖ Vector storage/retrieval works perfectly!")
                else:
                    print("   ‚ö†Ô∏è  Vector c√≥ s·ª± kh√°c bi·ªát sau khi l∆∞u/l·∫•y")
            else:
                print("   ‚ùå Kh√¥ng t√¨m th·∫•y vector trong database")
        
        # Cleanup - x√≥a test user
        print(f"\nüßπ CLEANUP: X√≥a test user")
        with sqlite3.connect(face_db.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM faces WHERE name = ?", (fake_name,))
            deleted_count = cursor.rowcount
            print(f"   - Deleted {deleted_count} test record(s)")
            
    except Exception as e:
        print(f"‚ùå Error in test: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Main function"""
    print("üöÄ Face Vector Storage Test Script")
    print("=" * 60)
    
    # Test vector storage
    test_vector_storage()
    
    print("\n" + "=" * 60)
    print("üìù T√ìM T·∫ÆT:")
    print("=" * 60)
    print("‚úÖ Vectors ƒë∆∞·ª£c l∆∞u trong table 'faces', column 'encoding'")
    print("‚úÖ Format: BLOB (pickle serialized numpy array)")
    print("‚úÖ Standard shape: (128,) dimensions")
    print("‚úÖ Data type: float64 numpy array") 
    print("‚úÖ Retrieval v√† comparison ho·∫°t ƒë·ªông ch√≠nh x√°c")
    print("=" * 60)

if __name__ == "__main__":
    main()
