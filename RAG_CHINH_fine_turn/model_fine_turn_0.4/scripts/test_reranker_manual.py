# scripts/test_reranker_manual.py

from sentence_transformers import CrossEncoder
from pathlib import Path

# ==== Load model ƒë√£ fine-tune ====
MODEL_PATH = Path("model_fine_turn/model/reranker_food_attr")
model = CrossEncoder(
    model_name_or_path=MODEL_PATH.as_posix(),
    local_files_only=True
)

# ==== Danh s√°ch m√≥n ƒÉn ƒë·ªÉ test (b·∫°n c√≥ th·ªÉ s·ª≠a t√πy √Ω) ====
dishes = [
    "Ph·ªü b√≤ H√† N·ªôi, gi√° d∆∞·ªõi 50K, h·ª£p t√¢m tr·∫°ng nh·ªõ nh√†",
    "C∆°m g√† x·ªëi m·ª°, mi·ªÅn Nam, h·ª£p ng√†y b·∫≠n r·ªôn",
    "B√∫n ch·∫£ H√† N·ªôi, m√≥n truy·ªÅn th·ªëng mi·ªÅn B·∫Øc",
    "L·∫©u Th√°i chua cay, h·ª£p ng√†y m∆∞a bu·ªìn",
    "C∆°m t·∫•m s∆∞·ªùn b√¨ ch·∫£, gi√° r·∫ª, h·ª£p d√¢n vƒÉn ph√≤ng"
]

while True:
    query = input("\nüìù Nh·∫≠p c√¢u h·ªèi (ho·∫∑c g√µ 'exit' ƒë·ªÉ tho√°t): ")
    if query.lower().strip() == "exit":
        break

    pairs = [(query, d) for d in dishes]
    scores = model.predict(pairs)

    ranked = sorted(zip(dishes, scores), key=lambda x: x[1], reverse=True)

    print("\nüèÜ Top m√≥n ƒÉn ph√π h·ª£p:")
    for i, (dish, score) in enumerate(ranked, 1):
        print(f"{i}. {dish} (score={score:.4f})")
