#!/usr/bin/env python3
"""
Script reset orders database
X√≥a to√†n b·ªô d·ªØ li·ªáu trong table orders v√† c√°c table li√™n quan
"""

import sqlite3
import os
from datetime import datetime

def reset_orders_database():
    """Reset to√†n b·ªô d·ªØ li·ªáu orders"""
    
    db_path = 'restaurant.db'
    
    if not os.path.exists(db_path):
        print("Kh√¥ng t√¨m th·∫•y file database restaurant.db")
        return False
    
    # Ki·ªÉm tra xem c√≥ process n√†o ƒëang d√πng database kh√¥ng
    print("üîç Ki·ªÉm tra database connection...")
    
    try:
        # Test connection ƒë∆°n gi·∫£n
        test_conn = sqlite3.connect(db_path, timeout=5.0)
        test_conn.execute("SELECT 1")
        test_conn.close()
        print("‚úì Database c√≥ th·ªÉ truy c·∫≠p")
    except sqlite3.OperationalError as e:
        if "database is locked" in str(e):
            print("‚ùå Database ƒëang b·ªã lock!")
            print("üí° H∆∞·ªõng d·∫´n fix:")
            print("1. T·∫Øt t·∫•t c·∫£ ·ª©ng d·ª•ng ƒëang ch·∫°y (Flask app, DB browser, etc.)")
            print("2. ƒê·ª£i 10-15 gi√¢y")
            print("3. Ch·∫°y l·∫°i script n√†y")
            print("4. N·∫øu v·∫´n l·ªói, restart m√°y t√≠nh")
            return False
        else:
            print(f"‚ùå L·ªói database: {e}")
            return False
    
    try:
        # Backup database tr∆∞·ªõc khi reset
        backup_path = f"restaurant_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
        
        # Copy database ƒë·ªÉ backup
        with open(db_path, 'rb') as src, open(backup_path, 'wb') as dst:
            dst.write(src.read())
        print(f"‚úì ƒê√£ backup database th√†nh: {backup_path}")
        
        # K·∫øt n·ªëi v·ªõi timeout v√† c√°c pragma ƒë·ªÉ tr√°nh lock
        with sqlite3.connect(db_path, timeout=30.0) as conn:
            # Set c√°c pragma ƒë·ªÉ t·ªëi ∆∞u h√≥a v√† tr√°nh lock
            conn.execute("PRAGMA journal_mode = WAL")
            conn.execute("PRAGMA synchronous = NORMAL") 
            conn.execute("PRAGMA temp_store = memory")
            conn.execute("PRAGMA mmap_size = 268435456")  # 256MB
            
            cursor = conn.cursor()
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng records tr∆∞·ªõc khi x√≥a
            cursor.execute("SELECT COUNT(*) FROM orders")
            orders_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM order_items")
            items_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM revenue_summary")
            revenue_count = cursor.fetchone()[0]
            
            print(f"\nD·ªØ li·ªáu hi·ªán t·∫°i:")
            print(f"- Orders: {orders_count} records")
            print(f"- Order Items: {items_count} records")
            print(f"- Revenue Summary: {revenue_count} records")
            
            if orders_count == 0 and items_count == 0 and revenue_count == 0:
                print("\nDatabase ƒë√£ tr·ªëng r·ªìi!")
                return True
            
            # X√°c nh·∫≠n reset
            print(f"\n‚ö†Ô∏è  C·∫¢NH B√ÅO: B·∫°n s·∫Øp x√≥a to√†n b·ªô d·ªØ li·ªáu orders!")
            confirm = input("Nh·∫≠p 'RESET' ƒë·ªÉ x√°c nh·∫≠n x√≥a to√†n b·ªô d·ªØ li·ªáu: ")
            
            if confirm != 'RESET':
                print("Reset ƒë√£ b·ªã h·ªßy")
                return False
            
            # Th·ª±c hi·ªán reset
            print("\nüîÑ ƒêang reset database...")
            
            # Begin transaction
            cursor.execute("BEGIN IMMEDIATE")
            
            try:
                # T·∫Øt foreign key constraints t·∫°m th·ªùi
                cursor.execute("PRAGMA foreign_keys = OFF")
                
                # X√≥a d·ªØ li·ªáu t·ª´ c√°c table theo th·ª© t·ª±
                cursor.execute("DELETE FROM order_items")
                print("‚úì ƒê√£ x√≥a order_items")
                
                cursor.execute("DELETE FROM orders") 
                print("‚úì ƒê√£ x√≥a orders")
                
                cursor.execute("DELETE FROM revenue_summary")
                print("‚úì ƒê√£ x√≥a revenue_summary")
                
                # Reset auto increment counters
                cursor.execute("DELETE FROM sqlite_sequence WHERE name IN ('orders', 'order_items', 'revenue_summary')")
                print("‚úì ƒê√£ reset auto increment")
                
                # B·∫≠t l·∫°i foreign key constraints
                cursor.execute("PRAGMA foreign_keys = ON")
                
                # Commit transaction
                cursor.execute("COMMIT")
                
                # Vacuum ƒë·ªÉ optimize database
                print("üîß ƒêang optimize database...")
                cursor.execute("VACUUM")
                
            except Exception as e:
                cursor.execute("ROLLBACK")
                raise e
            
            # Ki·ªÉm tra l·∫°i
            cursor.execute("SELECT COUNT(*) FROM orders")
            final_orders = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM order_items")
            final_items = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM revenue_summary")
            final_revenue = cursor.fetchone()[0]
            
            print(f"\n‚úÖ RESET HO√ÄN TH√ÄNH!")
            print(f"- Orders: {final_orders} records")
            print(f"- Order Items: {final_items} records") 
            print(f"- Revenue Summary: {final_revenue} records")
            
            return True
            
    except sqlite3.OperationalError as e:
        if "database is locked" in str(e):
            print(f"‚ùå Database v·∫´n b·ªã lock: {e}")
            print("\nüîß Th·ª≠ c√°c c√°ch fix sau:")
            print("1. T·∫Øt ho√†n to√†n Flask app (Ctrl+C nhi·ªÅu l·∫ßn)")
            print("2. T·∫Øt DB Browser ho·∫∑c SQLite tools kh√°c") 
            print("3. ƒê·ª£i 30 gi√¢y r·ªìi th·ª≠ l·∫°i")
            print("4. Restart terminal/command prompt")
            print("5. Restart m√°y t√≠nh")
        else:
            print(f"‚ùå L·ªói database: {e}")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói khi reset database: {e}")
        return False

def reset_tables_only():
    """Reset ch·ªâ table tables (kh√¥ng ƒë·ªông ƒë·∫øn orders)"""
    
    db_path = 'restaurant.db'
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM tables")
            tables_count = cursor.fetchone()[0]
            
            print(f"Tables hi·ªán t·∫°i: {tables_count} records")
            
            if tables_count == 0:
                print("Table tables ƒë√£ tr·ªëng!")
                return True
            
            confirm = input(f"X√≥a {tables_count} b√†n? (y/N): ")
            if confirm.lower() != 'y':
                print("H·ªßy reset tables")
                return False
            
            cursor.execute("DELETE FROM tables")
            cursor.execute("DELETE FROM sqlite_sequence WHERE name = 'tables'")
            conn.commit()
            
            print("‚úÖ ƒê√£ reset table tables")
            return True
            
    except Exception as e:
        print(f"‚ùå L·ªói reset tables: {e}")
        return False

if __name__ == "__main__":
    print("=== RESET DATABASE ORDERS ===")
    print("1. Reset to√†n b·ªô orders (orders + order_items + revenue_summary)")
    print("2. Reset ch·ªâ tables")
    print("3. H·ªßy")
    
    choice = input("\nCh·ªçn option (1/2/3): ")
    
    if choice == "1":
        reset_orders_database()
    elif choice == "2":
        reset_tables_only()
    else:
        print("ƒê√£ h·ªßy")
