import cv2
import time
from gtts import gTTS
from playsound import playsound
import os
import speech_recognition as sr

def say_vietnamese(text, filename="greeting.mp3"):
    """Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i ti·∫øng Vi·ªát v√† ph√°t ra"""
    tts = gTTS(text=text, lang='vi')
    tts.save(filename)
    playsound(filename)
    os.remove(filename)  # x√≥a file sau khi ph√°t xong

def listen_for_command(target_phrases=["ch√†o chatbot"]):
    recognizer = sr.Recognizer()
    mic = sr.Microphone()

    print(" ƒêang l·∫Øng nghe b·∫°n n√≥i...")

    with mic as source:
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source, timeout=5)

    try:
        text = recognizer.recognize_google(audio, language='vi-VN')
        print(f"üé§ B·∫°n n√≥i: {text}")
        for phrase in target_phrases:
            if phrase.lower() in text.lower():
                return phrase
    except sr.UnknownValueError:
        print("Kh√¥ng nghe r√µ...")
    except sr.RequestError as e:
        print(f"L·ªói k·∫øt n·ªëi API Google: {e}")
    
    return None

# Lu·ªìng x·ª≠ l√Ω:
    # Tr·∫°ng th√°i 1: Ph√°t hi·ªán khu√¥n m·∫∑t
        # N·∫øu ph√°t hi·ªán m·∫∑t li√™n t·ª•c trong ‚â• 5s ‚Üí ch√†o kh√°ch
        # Sau khi ch√†o ‚Üí chuy·ªÉn sang tr·∫°ng th√°i nghe

    # Tr·∫°ng th√°i 2: L·∫Øng nghe ng∆∞·ªùi d√πng
        # N·∫øu ng∆∞·ªùi d√πng n√≥i "ch√†o chatbot" ‚Üí n√≥i "B·∫°n c·∫ßn gi√∫p g√¨?"
        # N·∫øu ng∆∞·ªùi d√πng n√≥i "c·∫£m ∆°n qu√Ω kh√°ch ƒë√£ ƒë·∫øn c·ª≠a h√†ng ch√∫ng t√¥i" ‚Üí n√≥i "K√≠nh ch√†o qu√Ω kh√°ch!" ‚Üí quay l·∫°i nh·∫≠n di·ªán m·∫∑t


def detect_face_and_greet():
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    cam = cv2.VideoCapture(0)

    detected_time = None
    last_face_lost_time = None
    greeted = False

    print("ƒêang ƒëang m·ªü camera ")

    while True:
        ret, frame = cam.read()
        if not ret:
            print("Kh√¥ng c√≥ camera.")
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

        current_time = time.time()

        if len(faces) > 0:
            if detected_time is None:
                detected_time = current_time
                print("üü¢ Ph√°t hi·ªán khu√¥n m·∫∑t - b·∫Øt ƒë·∫ßu t√≠nh th·ªùi gian.")
            elif last_face_lost_time:
                # N·∫øu v·ª´a m·ªõi m·∫•t m·∫∑t nh∆∞ng quay l·∫°i nhanh < 0.3s th√¨ kh√¥ng reset
                time_lost = current_time - last_face_lost_time
                if time_lost < 0.3:
                    print(f"üü° M·∫∑t quay l·∫°i sau {time_lost:.2f}s < 0.3s ‚Üí gi·ªØ th·ªùi gian c≈©.")
                else:
                    # N·∫øu qu√° 0.3s th√¨ reset ho√†n to√†n
                    print(f"üîÅ M·∫•t m·∫∑t qu√° {time_lost:.2f}s ‚â• 0.3s ‚Üí reset th·ªùi gian.")
                    detected_time = current_time  # b·∫Øt ƒë·∫ßu l·∫°i t·ª´ l√∫c n√†y
                last_face_lost_time = None

            # Ki·ªÉm tra t·ªïng th·ªùi gian t·ª´ th·ªùi ƒëi·ªÉm ph√°t hi·ªán ban ƒë·∫ßu
            if not greeted and (current_time - detected_time >= 5):
                print("‚úÖ ƒê√£ ph√°t hi·ªán ng∆∞·ªùi. ƒêang ch√†o")
                say_vietnamese("Xin ch√†o, t√¥i l√† chatbot c·ªßa nh√† h√†ng ??? , r·∫•t vui ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n!")
                greeted = True
                
                # Nghe ti·∫øp gi·ªçng n√≥i
                user_command = listen_for_command()
                if user_command:
                    say_vietnamese("B·∫°n c·∫ßn gi√∫p g√¨?")
        else:
            if detected_time is not None and last_face_lost_time is None:
                last_face_lost_time = current_time
                print("üî¥ Khu√¥n m·∫∑t bi·∫øn m·∫•t - ch·ªù xem c√≥ quay l·∫°i kh√¥ng...")
        # V·∫Ω khung m·∫∑t
        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

        cv2.imshow("Camera - Chatbot Nha Hang ???? ", frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cam.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    detect_face_and_greet()
