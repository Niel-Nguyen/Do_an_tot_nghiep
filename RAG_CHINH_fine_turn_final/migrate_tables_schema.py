#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import os

def migrate_tables_schema():
    """Th√™m c√°c column m·ªõi cho table tables"""
    db_path = 'restaurant.db'
    
    if not os.path.exists(db_path):
        print("‚ùå Database file not found!")
        return
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            print("üîÑ Migrating tables schema...")
            
            # Ki·ªÉm tra column is_closed
            cursor.execute("PRAGMA table_info(tables)")
            columns = [column[1] for column in cursor.fetchall()]
            
            print(f"Current columns: {columns}")
            
            # Th√™m column is_closed n·∫øu ch∆∞a c√≥
            if 'is_closed' not in columns:
                print("‚ûï Adding is_closed column...")
                cursor.execute('ALTER TABLE tables ADD COLUMN is_closed BOOLEAN DEFAULT 0')
                print("‚úÖ Added is_closed column")
            else:
                print("‚úÖ is_closed column already exists")
            
            # Th√™m column token n·∫øu ch∆∞a c√≥
            if 'token' not in columns:
                print("‚ûï Adding token column...")
                cursor.execute('ALTER TABLE tables ADD COLUMN token TEXT')
                print("‚úÖ Added token column")
            else:
                print("‚úÖ token column already exists")
            
            # Th√™m column updated_at n·∫øu ch∆∞a c√≥
            if 'updated_at' not in columns:
                print("‚ûï Adding updated_at column...")
                cursor.execute('ALTER TABLE tables ADD COLUMN updated_at TIMESTAMP')
                print("‚úÖ Added updated_at column")
            else:
                print("‚úÖ updated_at column already exists")
            
            # Th√™m column location n·∫øu ch∆∞a c√≥
            if 'location' not in columns:
                print("‚ûï Adding location column...")
                cursor.execute('ALTER TABLE tables ADD COLUMN location TEXT DEFAULT ""')
                print("‚úÖ Added location column")
            else:
                print("‚úÖ location column already exists")
            
            conn.commit()
            print("‚úÖ Migration completed successfully!")
            
            # Hi·ªÉn th·ªã schema m·ªõi
            cursor.execute("PRAGMA table_info(tables)")
            new_columns = cursor.fetchall()
            print("\nüìã New table schema:")
            for col in new_columns:
                print(f"  - {col[1]} ({col[2]})")
                
    except Exception as e:
        print(f"‚ùå Migration failed: {e}")

if __name__ == "__main__":
    migrate_tables_schema()
