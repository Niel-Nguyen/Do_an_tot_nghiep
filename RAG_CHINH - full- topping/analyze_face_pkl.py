#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ ki·ªÉm tra file face_database.pkl
"""

import os
import pickle
import numpy as np
from datetime import datetime

def analyze_pickle_file():
    """Ph√¢n t√≠ch file face_database.pkl"""
    
    pkl_path = os.path.join('face_login', 'face_database.pkl')
    
    print("=" * 60)
    print("üîç PH√ÇN T√çCH FILE FACE_DATABASE.PKL")
    print("=" * 60)
    
    print(f"üìÇ File path: {pkl_path}")
    print(f"üìÅ File exists: {os.path.exists(pkl_path)}")
    
    if not os.path.exists(pkl_path):
        print("‚ùå File face_database.pkl kh√¥ng t·ªìn t·∫°i!")
        print("\nüí° File n√†y l√†:")
        print("   - Legacy storage format (c≈©)")  
        print("   - L∆∞u face encodings d∆∞·ªõi d·∫°ng dictionary pickle")
        print("   - ƒê∆∞·ª£c thay th·∫ø b·∫±ng SQLite database")
        print("   - Ch·ªâ c√≤n d√πng ƒë·ªÉ backward compatibility")
        return
    
    try:
        # L·∫•y th√¥ng tin file
        file_stats = os.stat(pkl_path)
        file_size = file_stats.st_size
        file_modified = datetime.fromtimestamp(file_stats.st_mtime)
        
        print(f"üìä File size: {file_size} bytes ({file_size/1024:.1f} KB)")
        print(f"üïí Last modified: {file_modified}")
        
        # ƒê·ªçc n·ªôi dung file
        print(f"\nüî¨ PH√ÇN T√çCH N·ªòI DUNG:")
        with open(pkl_path, 'rb') as f:
            data = pickle.load(f)
            
        print(f"   - Data type: {type(data)}")
        
        if isinstance(data, dict):
            print(f"   - Dictionary keys (faces): {len(data)}")
            
            if data:
                print(f"\nüë• DANH S√ÅCH FACES TRONG PKL:")
                for i, (name, encoding) in enumerate(data.items(), 1):
                    try:
                        print(f"   {i}. {name}:")
                        print(f"      ‚Ä¢ Encoding type: {type(encoding)}")
                        if isinstance(encoding, np.ndarray):
                            print(f"      ‚Ä¢ Shape: {encoding.shape}")
                            print(f"      ‚Ä¢ DType: {encoding.dtype}")
                            print(f"      ‚Ä¢ Range: [{encoding.min():.3f}, {encoding.max():.3f}]")
                            print(f"      ‚Ä¢ Mean: {encoding.mean():.3f}")
                            print(f"      ‚Ä¢ Std: {encoding.std():.3f}")
                            print(f"      ‚Ä¢ First 3 values: {encoding[:3]}")
                            
                            # Validate shape
                            if encoding.shape == (128,):
                                print(f"      ‚Ä¢ ‚úÖ Valid face encoding shape")
                            else:
                                print(f"      ‚Ä¢ ‚ö†Ô∏è Invalid shape! Expected (128,)")
                        else:
                            print(f"      ‚Ä¢ ‚ùå Not a numpy array: {encoding}")
                            
                    except Exception as e:
                        print(f"   {i}. {name}: ‚ùå Error analyzing: {e}")
            else:
                print("   - Dictionary is empty")
        else:
            print(f"   - ‚ùå Unexpected data type: {type(data)}")
            print(f"   - Content preview: {str(data)[:200]}...")
            
    except pickle.PickleError as e:
        print(f"‚ùå Pickle error: {e}")
    except Exception as e:
        print(f"‚ùå Error reading file: {e}")

def compare_pkl_vs_sqlite():
    """So s√°nh d·ªØ li·ªáu gi·ªØa pkl v√† SQLite"""
    
    print(f"\n" + "=" * 60)
    print("‚öñÔ∏è  SO S√ÅNH PKL vs SQLite DATABASE")
    print("=" * 60)
    
    try:
        # Import database manager
        import sys
        sys.path.append('face_login')
        from face_db_manager import FaceDatabase
        
        face_db = FaceDatabase()
        
        # L·∫•y data t·ª´ SQLite
        print("üóÑÔ∏è  SQLITE DATABASE:")
        sqlite_faces = face_db.get_all_faces()
        sqlite_dict = {}
        
        for face_id, name, encoding_blob, created_at, is_active in sqlite_faces:
            if is_active:
                try:
                    encoding = pickle.loads(encoding_blob)
                    sqlite_dict[name] = encoding
                    print(f"   - {name}: {encoding.shape}")
                except Exception as e:
                    print(f"   - {name}: ‚ùå Error: {e}")
        
        print(f"   Total active faces: {len(sqlite_dict)}")
        
        # L·∫•y data t·ª´ PKL
        pkl_path = os.path.join('face_login', 'face_database.pkl')
        pkl_dict = {}
        
        print(f"\nüì¶ PICKLE FILE:")
        if os.path.exists(pkl_path):
            try:
                with open(pkl_path, 'rb') as f:
                    pkl_dict = pickle.load(f)
                    
                for name, encoding in pkl_dict.items():
                    print(f"   - {name}: {encoding.shape if isinstance(encoding, np.ndarray) else type(encoding)}")
                    
                print(f"   Total faces: {len(pkl_dict)}")
            except Exception as e:
                print(f"   ‚ùå Error loading PKL: {e}")
        else:
            print("   ‚ùå PKL file doesn't exist")
        
        # So s√°nh
        print(f"\nüîç SO S√ÅNH:")
        
        # T√™n ng∆∞·ªùi d√πng
        sqlite_names = set(sqlite_dict.keys())
        pkl_names = set(pkl_dict.keys())
        
        common_names = sqlite_names & pkl_names
        only_sqlite = sqlite_names - pkl_names
        only_pkl = pkl_names - sqlite_names
        
        print(f"   - Faces chung c·∫£ 2: {len(common_names)} {list(common_names) if common_names else ''}")
        print(f"   - Ch·ªâ trong SQLite: {len(only_sqlite)} {list(only_sqlite) if only_sqlite else ''}")
        print(f"   - Ch·ªâ trong PKL: {len(only_pkl)} {list(only_pkl) if only_pkl else ''}")
        
        # So s√°nh encodings c·ªßa faces chung
        if common_names:
            print(f"\nüß¨ SO S√ÅNH ENCODINGS:")
            for name in common_names:
                sqlite_enc = sqlite_dict[name]
                pkl_enc = pkl_dict[name]
                
                if isinstance(sqlite_enc, np.ndarray) and isinstance(pkl_enc, np.ndarray):
                    if sqlite_enc.shape == pkl_enc.shape:
                        max_diff = np.max(np.abs(sqlite_enc - pkl_enc))
                        are_identical = np.array_equal(sqlite_enc, pkl_enc)
                        print(f"   - {name}: {'‚úÖ Identical' if are_identical else f'‚ö†Ô∏è Max diff: {max_diff:.6f}'}")
                    else:
                        print(f"   - {name}: ‚ùå Different shapes: {sqlite_enc.shape} vs {pkl_enc.shape}")
                else:
                    print(f"   - {name}: ‚ùå Type mismatch")
        
    except ImportError:
        print("‚ùå Cannot import face database manager")
    except Exception as e:
        print(f"‚ùå Error comparing: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Main function"""
    print("üîç Face Database PKL Analyzer")
    
    # Analyze pickle file
    analyze_pickle_file()
    
    # Compare with SQLite
    compare_pkl_vs_sqlite()
    
    print(f"\n" + "=" * 60)
    print("üìù K·∫æT LU·∫¨N V·ªÄ FACE_DATABASE.PKL:")
    print("=" * 60)
    print("üì¶ face_database.pkl l√† LEGACY STORAGE FORMAT")
    print("‚Ä¢ Format: Dictionary pickle file")
    print("‚Ä¢ Structure: {name: numpy_array_128D}")
    print("‚Ä¢ Purpose: L∆∞u face encodings tr∆∞·ªõc khi c√≥ SQLite")
    print("‚Ä¢ Status: Deprecated, ch·ªâ d√πng backward compatibility")
    print("‚Ä¢ Primary storage: SQLite database (face_database.db)")
    print("‚Ä¢ Sync: PKL ƒë∆∞·ª£c export t·ª´ SQLite ƒë·ªÉ t∆∞∆°ng th√≠ch")
    print("=" * 60)

if __name__ == "__main__":
    main()
