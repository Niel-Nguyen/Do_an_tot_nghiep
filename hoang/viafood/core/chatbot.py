from typing import List, Dict, Any, Optional
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from models.data_models import ChatMessage, VietnameseDish
from models.ai_models import ai_models
from core.rag_system import rag_system
from utils.text_processor import text_processor
from config.settings import settings

class VietnameseFoodChatbot:
    """Chatbot t∆∞ v·∫•n m√≥n ƒÉn Vi·ªát Nam"""
    
    def __init__(self):
        self.conversation_history: List[ChatMessage] = []
        self.system_prompt = self._create_system_prompt()
        self.is_ready = False
    
    def initialize(self, dishes: List[VietnameseDish]) -> bool:
        """Kh·ªüi t·∫°o chatbot v·ªõi d·ªØ li·ªáu m√≥n ƒÉn"""
        try:
            # Kh·ªüi t·∫°o RAG system
            if not rag_system.initialize(dishes):
                return False
            
            self.is_ready = True
            print("Chatbot ƒë√£ s·∫µn s√†ng!")
            return True
            
        except Exception as e:
            print(f"L·ªói khi kh·ªüi t·∫°o chatbot: {e}")
            return False
    
    def chat(self, user_message: str) -> str:
        """X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng"""
        if not self.is_ready:
            return "Chatbot ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng ki·ªÉm tra l·∫°i."
        
        try:
            # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
            self.conversation_history.append(
                ChatMessage(role="user", content=user_message)
            )
            
            # T√¨m ki·∫øm th√¥ng tin li√™n quan
            context = rag_system.get_context_for_llm(user_message)
            
            # Ph√¢n t√≠ch √Ω ƒë·ªãnh c√¢u h·ªèi
            intent = text_processor.analyze_query_intent(user_message)
            
            # T·∫°o prompt cho LLM
            full_prompt = self._create_full_prompt(user_message, context, intent)
            
            # G·ªçi LLM
            llm = ai_models.get_llm()
            response = llm.invoke(full_prompt)
            
            # X·ª≠ l√Ω response
            bot_response = self._process_llm_response(response, intent)
            
            # L∆∞u ph·∫£n h·ªìi
            self.conversation_history.append(
                ChatMessage(role="assistant", content=bot_response)
            )
            
            return bot_response
            
        except Exception as e:
            error_msg = f"Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n: {str(e)}"
            self.conversation_history.append(
                ChatMessage(role="assistant", content=error_msg)
            )
            return error_msg
    
    def _create_system_prompt(self) -> str:
        """T·∫°o system prompt cho chatbot"""
        return """B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n m√≥n ƒÉn Vi·ªát Nam th√¢n thi·ªán v√† hi·ªÉu bi·∫øt s√¢u s·∫Øc. 

NHI·ªÜM V·ª§:
- T∆∞ v·∫•n m√≥n ƒÉn Vi·ªát Nam d·ª±a tr√™n th√¥ng tin ƒë∆∞·ª£c cung c·∫•p
- ƒê∆∞a ra g·ª£i √Ω ph√π h·ª£p v·ªõi nhu c·∫ßu v√† t√¨nh hu·ªëng c·ªßa ng∆∞·ªùi d√πng
- Chia s·∫ª ki·∫øn th·ª©c v·ªÅ ·∫©m th·ª±c Vi·ªát Nam m·ªôt c√°ch sinh ƒë·ªông v√† h·∫•p d·∫´n

PHONG C√ÅCH TR√åNH B√ÄY:
- Th√¢n thi·ªán, nhi·ªát t√¨nh nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n am hi·ªÉu ·∫©m th·ª±c
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n, d·ªÖ hi·ªÉu
- Tr√°nh n√≥i chuy·ªán kh√¥ khan, h√£y l√†m cho cu·ªôc tr√≤ chuy·ªán sinh ƒë·ªông
- ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ v√† th·ª±c t·∫ø

QUY T·∫ÆC:
1. CH·ªà t∆∞ v·∫•n d·ª±a tr√™n th√¥ng tin m√≥n ƒÉn ƒë∆∞·ª£c cung c·∫•p trong CONTEXT
2. N·∫øu kh√¥ng c√≥ th√¥ng tin ph√π h·ª£p, h√£y th√†nh th·∫≠t n√≥i v√† g·ª£i √Ω h·ªèi kh√°c
3. Lu√¥n ƒë·ªÅ c·∫≠p ƒë·∫øn v√πng mi·ªÅn c·ªßa m√≥n ƒÉn khi c√≥ th·ªÉ
4. N·∫øu c√≥ link tham kh·∫£o, h√£y ƒë·ªÅ xu·∫•t ng∆∞·ªùi d√πng tham kh·∫£o th√™m
5. Khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng th·ª≠ nghi·ªám v√† chia s·∫ª kinh nghi·ªám

ƒê·ªäNH D·∫†NG PH·∫¢N H·ªíI:
- B·∫Øt ƒë·∫ßu b·∫±ng l·ªùi ch√†o th√¢n thi·ªán
- Tr·∫£ l·ªùi tr·ª±c ti·∫øp c√¢u h·ªèi
- ƒê∆∞a ra th√¥ng tin chi ti·∫øt v·ªÅ m√≥n ƒÉn (nguy√™n li·ªáu, c√°ch l√†m, ƒë·∫∑c ƒëi·ªÉm)
- K·∫øt th√∫c b·∫±ng c√¢u h·ªèi ho·∫∑c g·ª£i √Ω ƒë·ªÉ duy tr√¨ cu·ªôc tr√≤ chuy·ªán

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† gi·ªØ phong c√°ch g·∫ßn g·ª•i, nhi·ªát t√¨nh!"""
    
    def _create_full_prompt(self, user_message: str, context: str, intent: Dict[str, Any]) -> List:
        """T·∫°o prompt ƒë·∫ßy ƒë·ªß cho LLM"""
        messages = [
            SystemMessage(content=self.system_prompt)
        ]
        
        # Th√™m context t·ª´ RAG
        context_message = f"""
CONTEXT - Th√¥ng tin m√≥n ƒÉn li√™n quan:
{context}

PH√ÇN T√çCH C√ÇU H·ªéI:
- Lo·∫°i c√¢u h·ªèi: {intent['type']}
- T·ª´ kh√≥a ch√≠nh: {', '.join(intent['keywords'])}
- B·ªô l·ªçc: {str(intent['filters']) if intent['filters'] else 'Kh√¥ng c√≥'}
"""
        
        messages.append(SystemMessage(content=context_message))
        
        # Th√™m l·ªãch s·ª≠ h·ªôi tho·∫°i (gi·ªõi h·∫°n 5 tin nh·∫Øn g·∫ßn nh·∫•t)
        recent_history = self.conversation_history[-10:] if len(self.conversation_history) > 10 else self.conversation_history
        
        for msg in recent_history:
            if msg.role == "user":
                messages.append(HumanMessage(content=msg.content))
            else:
                messages.append(AIMessage(content=msg.content))
        
        # Th√™m tin nh·∫Øn hi·ªán t·∫°i
        messages.append(HumanMessage(content=user_message))
        
        return messages
    
    def _process_llm_response(self, response: Any, intent: Dict[str, Any]) -> str:
        """X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ LLM"""
        try:
            # L·∫•y n·ªôi dung text t·ª´ response
            if hasattr(response, 'content'):
                content = response.content
            else:
                content = str(response)
            
            # L√†m s·∫°ch v√† ƒë·ªãnh d·∫°ng
            content = text_processor.clean_text(content)
            
            # Th√™m emoji ph√π h·ª£p d·ª±a tr√™n intent
            if intent['type'] == 'recipe':
                content = f"üë®‚Äçüç≥ {content}"
            elif intent['type'] == 'ingredient':
                content = f"üõí {content}"
            elif intent['type'] == 'recommendation':
                content = f"üí° {content}"
            elif intent['type'] == 'region':
                content = f"üó∫Ô∏è {content}"
            else:
                content = f"üçú {content}"
            
            return content
            
        except Exception as e:
            return f"C√≥ l·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi: {str(e)}"
    
    def get_conversation_summary(self) -> Dict[str, Any]:
        """L·∫•y t√≥m t·∫Øt cu·ªôc h·ªôi tho·∫°i"""
        return {
            'total_messages': len(self.conversation_history),
            'user_messages': len([msg for msg in self.conversation_history if msg.role == "user"]),
            'bot_messages': len([msg for msg in self.conversation_history if msg.role == "assistant"]),
            'recent_topics': self._extract_recent_topics()
        }
    
    def _extract_recent_topics(self) -> List[str]:
        """Tr√≠ch xu·∫•t ch·ªß ƒë·ªÅ g·∫ßn ƒë√¢y"""
        topics = []
        recent_messages = self.conversation_history[-6:]  # 3 c·∫∑p h·ªèi-ƒë√°p g·∫ßn nh·∫•t
        
        for msg in recent_messages:
            if msg.role == "user":
                keywords = text_processor.extract_keywords(msg.content)
                topics.extend(keywords[:2])  # L·∫•y 2 t·ª´ kh√≥a ch√≠nh
        
        # Lo·∫°i b·ªè tr√πng l·∫∑p v√† gi·ªØ t·ªëi ƒëa 5 topics
        unique_topics = list(dict.fromkeys(topics))[:5]
        return unique_topics
    
    def clear_conversation(self):
        """X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i"""
        self.conversation_history.clear()
    
    def get_suggested_questions(self) -> List[str]:
        """G·ª£i √Ω c√¢u h·ªèi d·ª±a tr√™n ng·ªØ c·∫£nh"""
        base_questions = [
            "B·∫°n c√≥ th·ªÉ g·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p v·ªõi th·ªùi ti·∫øt h√¥m nay kh√¥ng?",
            "T√¥i mu·ªën t√¨m m√≥n ƒÉn ƒë·∫∑c s·∫£n mi·ªÅn B·∫Øc",
            "C√≥ m√≥n chay n√†o ngon v√† d·ªÖ l√†m kh√¥ng?",
            "G·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p cho b·ªØa t·ªëi gia ƒë√¨nh",
            "M√≥n n√†o ph√π h·ª£p khi t√¥i ƒëang bu·ªìn?",
            "C√°ch l√†m ph·ªü b√≤ truy·ªÅn th·ªëng nh∆∞ th·∫ø n√†o?",
            "Nguy√™n li·ªáu c·∫ßn thi·∫øt ƒë·ªÉ l√†m b√°nh ch∆∞ng l√† g√¨?",
            "M√≥n ƒÉn n√†o c√≥ th·ªÉ l√†m nhanh trong 30 ph√∫t?",
        ]
        
        # Th√™m c√¢u h·ªèi d·ª±a tr√™n l·ªãch s·ª≠ (n·∫øu c√≥)
        recent_topics = self._extract_recent_topics()
        dynamic_questions = []
        
        for topic in recent_topics[:2]:
            dynamic_questions.append(f"C√≤n m√≥n n√†o kh√°c li√™n quan ƒë·∫øn {topic}?")
            dynamic_questions.append(f"C√°ch l√†m {topic} t·∫°i nh√† nh∆∞ th·∫ø n√†o?")
        
        # K·∫øt h·ª£p v√† tr·ªôn ng·∫´u nhi√™n
        all_questions = base_questions + dynamic_questions
        return all_questions[:6]  # Tr·∫£ v·ªÅ 6 g·ª£i √Ω
    
    def get_chatbot_stats(self) -> Dict[str, Any]:
        """Th·ªëng k√™ v·ªÅ chatbot"""
        return {
            'is_ready': self.is_ready,
            'conversation_stats': self.get_conversation_summary(),
            'rag_stats': rag_system.get_statistics(),
            'system_info': {
                'model': settings.CHAT_MODEL,
                'provider': settings.MODEL_PROVIDER
            }
        }

# Global instance
vietnamese_food_chatbot = VietnameseFoodChatbot()