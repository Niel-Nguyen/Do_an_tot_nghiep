#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ ki·ªÉm tra c·∫•u tr√∫c database face_database.db
"""

import sqlite3
import pickle
import numpy as np
import os
from datetime import datetime

def check_database_structure():
    """Ki·ªÉm tra c·∫•u tr√∫c database v√† d·ªØ li·ªáu"""
    
    # ƒê∆∞·ªùng d·∫´n database
    db_path = os.path.join('face_login', 'face_database.db')
    
    print("=" * 60)
    print("üîç KI·ªÇM TRA C·∫§U TR√öC FACE DATABASE")
    print("=" * 60)
    
    print(f"üìÇ Database path: {db_path}")
    print(f"üìÅ File exists: {os.path.exists(db_path)}")
    
    if not os.path.exists(db_path):
        print("‚ùå Database file kh√¥ng t·ªìn t·∫°i!")
        return
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            # 1. Li·ªát k√™ t·∫•t c·∫£ tables
            print("\nüìã DANH S√ÅCH TABLES:")
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            
            for i, table in enumerate(tables, 1):
                print(f"{i}. {table[0]}")
            
            # 2. Ki·ªÉm tra structure t·ª´ng table
            for table_name in [t[0] for t in tables]:
                print(f"\nüèóÔ∏è  STRUCTURE TABLE '{table_name}':")
                cursor.execute(f"PRAGMA table_info({table_name})")
                columns = cursor.fetchall()
                
                for col in columns:
                    col_id, col_name, col_type, not_null, default_val, primary_key = col
                    pk_marker = " üîë PRIMARY KEY" if primary_key else ""
                    null_marker = " NOT NULL" if not_null else ""
                    default_marker = f" DEFAULT {default_val}" if default_val else ""
                    
                    print(f"   - {col_name}: {col_type}{null_marker}{default_marker}{pk_marker}")
            
            # 3. ƒê·∫øm records trong t·ª´ng table
            print(f"\nüìä S·ªê L∆Ø·ª¢NG RECORDS:")
            for table_name in [t[0] for t in tables]:
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                print(f"   - {table_name}: {count} records")
            
            # 4. Ki·ªÉm tra d·ªØ li·ªáu faces table (n∆°i l∆∞u vector)
            print(f"\nüß¨ CHI TI·∫æT FACES TABLE (N∆†I L∆ØU VECTOR):")
            cursor.execute("SELECT id, name, created_at, login_count, is_active FROM faces ORDER BY id")
            faces = cursor.fetchall()
            
            if not faces:
                print("   ‚ùå Kh√¥ng c√≥ face n√†o trong database")
            else:
                for face in faces:
                    face_id, name, created_at, login_count, is_active = face
                    status = "‚úÖ Active" if is_active else "‚ùå Inactive"
                    print(f"   - ID {face_id}: {name} | Created: {created_at} | Logins: {login_count} | {status}")
                
                # L·∫•y vector ƒë·∫ßu ti√™n ƒë·ªÉ ki·ªÉm tra
                print(f"\nüéØ KI·ªÇM TRA VECTOR (ENCODING) ƒê·∫¶U TI√äN:")
                cursor.execute("SELECT id, name, encoding FROM faces LIMIT 1")
                first_face = cursor.fetchone()
                
                if first_face:
                    face_id, name, encoding_blob = first_face
                    
                    print(f"   - Face ID: {face_id}")
                    print(f"   - Name: {name}")
                    print(f"   - Encoding blob size: {len(encoding_blob)} bytes")
                    
                    try:
                        # Deserialize vector
                        encoding = pickle.loads(encoding_blob)
                        print(f"   - Vector shape: {encoding.shape}")
                        print(f"   - Vector type: {type(encoding)}")
                        print(f"   - Vector dtype: {encoding.dtype}")
                        print(f"   - Vector range: [{encoding.min():.3f}, {encoding.max():.3f}]")
                        print(f"   - Vector first 5 values: {encoding[:5]}")
                        
                        # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa vector
                        if encoding.shape == (128,):
                            print("   ‚úÖ Vector c√≥ ƒë·ªãnh d·∫°ng chu·∫©n face_recognition (128 dimensions)")
                        else:
                            print(f"   ‚ö†Ô∏è  Vector kh√¥ng chu·∫©n! Expected (128,), got {encoding.shape}")
                            
                    except Exception as e:
                        print(f"   ‚ùå L·ªói khi deserialize vector: {e}")
            
            # 5. Ki·ªÉm tra face_sessions (session data)
            print(f"\nüé™ FACE SESSIONS (TEMPORARY DATA):")
            cursor.execute("SELECT COUNT(*) FROM face_sessions WHERE is_active = 1")
            active_sessions = cursor.fetchone()[0]
            print(f"   - Active sessions: {active_sessions}")
            
            cursor.execute("""
                SELECT fs.id, f.name, fs.table_id, fs.session_token, fs.started_at 
                FROM face_sessions fs 
                JOIN faces f ON fs.face_id = f.id 
                WHERE fs.is_active = 1
                ORDER BY fs.started_at DESC
                LIMIT 5
            """)
            sessions = cursor.fetchall()
            
            if sessions:
                for session in sessions:
                    sess_id, name, table_id, token, started_at = session
                    print(f"   - {name} @ Table {table_id} | Started: {started_at}")
            else:
                print("   - Kh√¥ng c√≥ active session n√†o")
            
            # 6. Th·ªëng k√™ login history
            print(f"\nüìà TH·ªêNG K√ä LOGIN HISTORY:")
            cursor.execute("SELECT COUNT(*) FROM login_history")
            total_logins = cursor.fetchone()[0]
            print(f"   - Total logins: {total_logins}")
            
            cursor.execute("""
                SELECT f.name, COUNT(*) as login_count 
                FROM login_history lh 
                JOIN faces f ON lh.face_id = f.id 
                GROUP BY f.name 
                ORDER BY login_count DESC 
                LIMIT 5
            """)
            top_users = cursor.fetchall()
            
            if top_users:
                print("   - Top users:")
                for user, count in top_users:
                    print(f"     ‚Ä¢ {user}: {count} logins")
    
    except sqlite3.Error as e:
        print(f"‚ùå Database error: {e}")
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")

def main():
    """Main function"""
    try:
        check_database_structure()
        
        print("\n" + "=" * 60)
        print("üìù K·∫æT LU·∫¨N:")
        print("=" * 60)
        print("‚Ä¢ Vector (face encoding) ƒë∆∞·ª£c l∆∞u trong TABLE 'faces'")
        print("‚Ä¢ C·ªôt 'encoding' ch·ª©a BLOB data (pickle serialized numpy array)")
        print("‚Ä¢ M·ªói vector l√† numpy array 128 dimensions")
        print("‚Ä¢ Faces table l√† PERSISTENT data (kh√¥ng reset)")
        print("‚Ä¢ Face_sessions table l√† TEMPORARY data (reset khi b√†n ƒë√≥ng)")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå Error in main: {e}")

if __name__ == "__main__":
    main()
